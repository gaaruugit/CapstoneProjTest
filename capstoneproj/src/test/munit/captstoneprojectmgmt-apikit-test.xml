<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd">
    <spring:beans>
        <spring:import resource="classpath:captstoneprojectmgmt.xml"/>
    </spring:beans>
    <munit:config mock-connectors="false" mock-inbounds="false" doc:name="MUnit configuration"/>
    <http:request-config name="HTTP_Request_Configuration" host="localhost" port="8082" basePath="/api" doc:name="HTTP Request Configuration"/>
    <munit:test name="put:/Users/ID:captstoneprojectmgmt-config-200-application/json-FlowTest" description="Verifying functionality of [put:/Users/ID:captstoneprojectmgmt-config-200-application/json]">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="put:/Users/{ID}:captstoneprojectmgmt-config"/>
            </mock:with-attributes>
            <mock:then-return payload="#[payload]" mimeType="application/json"/>
        </mock:when>
        <set-variable variableName="ID" value="#['null']" doc:name="ID"/>
        <http:request config-ref="HTTP_Request_Configuration" path="/Users/#[flowVars['ID']]" method="PUT" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>
            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string"/>
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200"/>
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/put_200_users_{id}_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected"/>
    </munit:test>
    <munit:test name="delete:/Users/ID:captstoneprojectmgmt-config-200-application/json-FlowTest" description="Verifying functionality of [delete:/Users/ID:captstoneprojectmgmt-config-200-application/json]">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="delete:/Users/{ID}:captstoneprojectmgmt-config"/>
            </mock:with-attributes>
            <mock:then-return payload="#[payload]"/>
        </mock:when>
        <set-variable variableName="ID" value="#['null']" doc:name="ID"/>
        <http:request config-ref="HTTP_Request_Configuration" path="/Users/#[flowVars['ID']]" method="DELETE" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>
            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string"/>
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200"/>
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/delete_200_users_{id}_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected"/>
    </munit:test>
    <munit:test name="get:/Users:captstoneprojectmgmt-config-200-application/json-FlowTest" description="Verifying functionality of [get:/Users:captstoneprojectmgmt-config-200-application/json]">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="get:/Users:captstoneprojectmgmt-config"/>
            </mock:with-attributes>
            <mock:then-return payload="#[payload]"/>
        </mock:when>
        <http:request config-ref="HTTP_Request_Configuration" path="/Users" method="GET" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>
            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string"/>
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200"/>
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_200_users_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected"/>
    </munit:test>
    <munit:test name="get:/Users/ID:captstoneprojectmgmt-config-200-application/json-FlowTest" description="Verifying functionality of [get:/Users/ID:captstoneprojectmgmt-config-200-application/json]">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="get:/Users/{ID}:captstoneprojectmgmt-config"/>
            </mock:with-attributes>
            <mock:then-return payload="#[payload]"/>
        </mock:when>
        <set-variable variableName="ID" value="#['null']" doc:name="ID"/>
        <http:request config-ref="HTTP_Request_Configuration" path="/Users/#[flowVars['ID']]" method="GET" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>
            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string"/>
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200"/>
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_200_users_{id}_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected"/>
    </munit:test>
    <munit:test name="post:/Users:captstoneprojectmgmt-config-200-application/json-FlowTest" description="Verifying functionality of [post:/Users:captstoneprojectmgmt-config-200-application/json]">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="post:/Users:captstoneprojectmgmt-config"/>
            </mock:with-attributes>
            <mock:then-return payload="#[payload]"/>
        </mock:when>
        <http:request config-ref="HTTP_Request_Configuration" path="/Users" method="POST" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>
            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string"/>
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200"/>
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/post_200_users_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected"/>
    </munit:test>
    <munit:test name="captstoneprojectmgmt-apikit-test-captstoneprojectmgmt-consoleTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['APIkit Console']"/>
                <mock:with-attribute name="name" whereValue="captstoneprojectmgmt-console"/>
            </mock:with-attributes>
            <mock:then-return payload="#[payload]" mimeType="application/json"/>
        </mock:when>
        <munit:set payload="#[payload]" mimeType="application/json" doc:name="Set Message"/>
        <flow-ref name="captstoneprojectmgmt-console" doc:name="Flow-ref to captstoneprojectmgmt-console"/>
        <munit:assert-on-equals message="failed" expectedValue="#[payload]" actualValue="#[payload]" doc:name="Assert Equals"/>
    </munit:test>
    <munit:test name="captstoneprojectmgmt-apikit-test-post:/Users:captstoneprojectmgmt-configTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Transform Message']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[payload]"/>
        </mock:when>
        <flow-ref name="post:/Users:captstoneprojectmgmt-config" doc:name="Flow-ref to post:/Users:captstoneprojectmgmt-config"/>
        <munit:assert-on-equals message="failed" expectedValue="#[payload]" actualValue="#[payload]" doc:name="Assert Equals"/>
    </munit:test>
    <munit:test name="captstoneprojectmgmt-apikit-test-post:/Users:captstoneprojectmgmt-configTest1" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Transform Message']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[payload]" mimeType="application/json"/>
        </mock:when>
        <flow-ref name="post:/Users:captstoneprojectmgmt-config" doc:name="Flow-ref to post:/Users:captstoneprojectmgmt-config"/>
        <munit:assert-on-equals message="failed" expectedValue="#[payload]" actualValue="#[payload]" doc:name="Assert Equals"/>
    </munit:test>
    <munit:test name="captstoneprojectmgmt-apikit-test-put:/Users/{ID}:captstoneprojectmgmt-configTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Variable']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[payload]" mimeType="application/json"/>
        </mock:when>
        <flow-ref name="put:/Users/{ID}:captstoneprojectmgmt-config" doc:name="Flow-ref to put:/Users/{ID}:captstoneprojectmgmt-config"/>
        <munit:assert-on-equals message="failed" expectedValue="#[payload]" actualValue="#[payload]" doc:name="Assert Equals"/>
    </munit:test>
    <munit:test name="captstoneprojectmgmt-apikit-test-put:/Users/{ID}:captstoneprojectmgmt-configTest2" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Web Service Consumer']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[payload]" mimeType="application/json"/>
        </mock:when>
        <flow-ref name="put:/Users/{ID}:captstoneprojectmgmt-config" doc:name="Flow-ref to put:/Users/{ID}:captstoneprojectmgmt-config"/>
        <munit:assert-on-equals message="failed" expectedValue="#[payload]" actualValue="#[payload]" doc:name="Assert Equals"/>
    </munit:test>
    <munit:test name="captstoneprojectmgmt-apikit-test-delete:/Users/{ID}:captstoneprojectmgmt-configTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Variable']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[payload]" mimeType="application/json"/>
        </mock:when>
        <flow-ref name="delete:/Users/{ID}:captstoneprojectmgmt-config" doc:name="Flow-ref to delete:/Users/{ID}:captstoneprojectmgmt-config"/>
        <munit:assert-on-equals message="failed" expectedValue="#[payload]" actualValue="#[payload]" doc:name="Assert Equals"/>
    </munit:test>
    <munit:test name="captstoneprojectmgmt-apikit-test-delete:/Users/{ID}:captstoneprojectmgmt-configTest1" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Web Service Consumer']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[payload]" mimeType="application/json"/>
        </mock:when>
        <flow-ref name="delete:/Users/{ID}:captstoneprojectmgmt-config" doc:name="Flow-ref to delete:/Users/{ID}:captstoneprojectmgmt-config"/>
        <munit:assert-on-equals message="failed" expectedValue="#[payload]" actualValue="#[payload]" doc:name="Assert Equals"/>
    </munit:test>
    <munit:test name="captstoneprojectmgmt-apikit-test-delete:/Users/{ID}:captstoneprojectmgmt-configTest2" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Set Payload']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[payload]" mimeType="application/json"/>
        </mock:when>
        <flow-ref name="delete:/Users/{ID}:captstoneprojectmgmt-config" doc:name="Flow-ref to delete:/Users/{ID}:captstoneprojectmgmt-config"/>
        <munit:assert-on-equals message="failed" expectedValue="#[payload]" actualValue="#[payload]" doc:name="Assert Equals"/>
    </munit:test>
    <munit:test name="captstoneprojectmgmt-apikit-test-get:/Users:captstoneprojectmgmt-configTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Set Payload']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[payload]" mimeType="application/json"/>
        </mock:when>
        <flow-ref name="get:/Users:captstoneprojectmgmt-config" doc:name="Flow-ref to get:/Users:captstoneprojectmgmt-config"/>
        <munit:assert-on-equals message="failed" expectedValue="#[payload]" actualValue="#[payload]" doc:name="Assert Equals"/>
    </munit:test>
    <munit:test name="captstoneprojectmgmt-apikit-test-get:/Users:captstoneprojectmgmt-configTest1" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Transform Message']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[payload]" mimeType="application/json"/>
        </mock:when>
        <flow-ref name="get:/Users:captstoneprojectmgmt-config" doc:name="Flow-ref to get:/Users:captstoneprojectmgmt-config"/>
        <munit:assert-on-equals message="failed" expectedValue="#[payload]" actualValue="#[payload]" doc:name="Assert Equals"/>
    </munit:test>
    <munit:test name="captstoneprojectmgmt-apikit-test-get:/Users/{ID}:captstoneprojectmgmt-configTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Variable']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[payload]" mimeType="application/json"/>
        </mock:when>
        <flow-ref name="get:/Users/{ID}:captstoneprojectmgmt-config" doc:name="Flow-ref to get:/Users/{ID}:captstoneprojectmgmt-config"/>
        <munit:assert-on-equals message="failed" expectedValue="#[payload]" actualValue="#[payload]" doc:name="Assert Equals"/>
    </munit:test>
    <munit:test name="captstoneprojectmgmt-apikit-test-get:/Users/{ID}:captstoneprojectmgmt-configTest1" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Web Service Consumer']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[payload]" mimeType="application/json"/>
        </mock:when>
        <flow-ref name="get:/Users/{ID}:captstoneprojectmgmt-config" doc:name="Flow-ref to get:/Users/{ID}:captstoneprojectmgmt-config"/>
        <munit:assert-on-equals message="failed" expectedValue="#[payload]" actualValue="#[payload]" doc:name="Assert Equals"/>
    </munit:test>
    <munit:test name="captstoneprojectmgmt-apikit-test-get:/Users/{ID}:captstoneprojectmgmt-configTest2" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Web Service Consumer']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[payload]" mimeType="application/json"/>
        </mock:when>
        <flow-ref name="get:/Users/{ID}:captstoneprojectmgmt-config" doc:name="Flow-ref to get:/Users/{ID}:captstoneprojectmgmt-config"/>
        <munit:assert-on-equals message="failed" expectedValue="#[payload]" actualValue="#[payload]" doc:name="Assert Equals"/>
    </munit:test>
    <munit:test name="captstoneprojectmgmt-apikit-test-get:/Users/{ID}:captstoneprojectmgmt-configTest3" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Transform Message']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[payload]" mimeType="application/json"/>
        </mock:when>
        <flow-ref name="get:/Users/{ID}:captstoneprojectmgmt-config" doc:name="Flow-ref to get:/Users/{ID}:captstoneprojectmgmt-config"/>
        <munit:assert-on-equals message="failed" expectedValue="#[payload]" actualValue="#[payload]" doc:name="Assert Equals"/>
    </munit:test>
    <munit:test name="captstoneprojectmgmt-apikit-test-get:/Users/{ID}:captstoneprojectmgmt-configTest4" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Web Service Consumer']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[payload]" mimeType="application/json"/>
        </mock:when>
        <munit:set payload="#[payload]" mimeType="application/json" doc:name="Set Message"/>
        <flow-ref name="get:/Users/{ID}:captstoneprojectmgmt-config" doc:name="Flow-ref to get:/Users/{ID}:captstoneprojectmgmt-config"/>
        <munit:assert-on-equals message="failed" expectedValue="#[payload]" actualValue="#[payload]" doc:name="Assert Equals"/>
    </munit:test>
</mule>
